--- drivers/usb/core/devio.c
+++ drivers/usb/core/devio.c
@@ -676,25 +671,7 @@
 	index &= 0xff;
 	switch (requesttype & USB_RECIP_MASK) {
 	case USB_RECIP_ENDPOINT:
-		if ((index & ~USB_DIR_IN) == 0)
-			return 0;
 		ret = findintfep(ps->dev, index);
-		if (ret < 0) {
-			/*
-			 * Some not fully compliant Win apps seem to get
-			 * index wrong and have the endpoint number here
-			 * rather than the endpoint address (with the
-			 * correct direction). Win does let this through,
-			 * so we'll not reject it here but leave it to
-			 * the device to not break KVM. But we warn.
-			 */
-			ret = findintfep(ps->dev, index ^ 0x80);
-			if (ret >= 0)
-				dev_info(&ps->dev->dev,
-					"%s: process %i (%s) requesting ep %02x but needs %02x\n",
-					__func__, task_pid_nr(current),
-					current->comm, index, index ^ 0x80);
-		}
 		if (ret >= 0)
 			ret = checkintf(ps, ret);
 		break;
@@ -1616,14 +1581,10 @@
 	void __user *addr = as->userurb;
 	unsigned int i;
 
-	if (as->userbuffer && urb->actual_length) {
-		if (urb->number_of_packets > 0)		/* Isochronous */
-			i = urb->transfer_buffer_length;
-		else					/* Non-Isoc */
-			i = urb->actual_length;
-		if (copy_to_user(as->userbuffer, urb->transfer_buffer, i))
+	if (as->userbuffer && urb->actual_length)
+		if (copy_to_user(as->userbuffer, urb->transfer_buffer,
+				 urb->actual_length))
 			return -EFAULT;
-	}
 	if (put_user(as->status, &userurb->status))
 		return -EFAULT;
 	if (put_user(urb->actual_length, &userurb->actual_length))
